/* * { box-sizing: border-box; } */
/* /!\ You need to add vendor prefixes in order to render the CSS properly (or simply use http://leaverou.github.io/prefixfree/) /!\ I don't know what this means but it works */
/*

So you can change the numbers in root to rotate and resize the cube. I'm hoping that we can do this per-cube.
In the last setup there were various pre-set rotation positions that could be selected...

*/
:root {
  --w: 20%;
  --h: 5em;
  --d: 3em;
  --rx: -15deg;
  --ry: 5deg;
  --rz: 20deg;
}
/* force scrollbar, prevents initial gap */
html {
overflow-y: scroll; 
}

body {
font-family: sans-serif;
}

/* ---- grid ---- */

.grid {
background: #DDD;
}

/* clear fix */
.grid:after {
content: '';
display: block;
clear: both;
}

/* ---- .element-item ---- */

/* 5 columns, percentage width */
.grid-item,
.grid-sizer {
width: 20%;
}

.grid-item {
float: left;
height: 100px;
background: #0D8;
/*  CHANGED THE BORDER AND IT FIT  */
border: 0.1px solid #333;
border-color: hsla(0, 0%, 0%, 0.7);
transition: transform 1s;
}


.face {
  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.4);
}
.grid-item, .face, .face-wrapper, .cr {
  position: absolute;
  transform-style: preserve-3d;
}

.grid-item:hover {
  transform: rotateY(0deg) rotateX(0deg) rotateZ(0deg);
}
/*   .grid-item:hover {
  animation: moving 2s 1;
} */
/* @keyframes move{
from{};
to {transform:translateX(100%)};
}
@keyframes moving{
  0%  {    }
  50%  { transform:  rotateZ(45deg); translateY(10); }
  75%  {   transform:  rotatex(45deg); translateY(10); }
  100% { }
}
*/
.face, .face-wrapper {
  overflow: hidden;
  transform-origin: 0 0;
  backface-visibility: hidden;
/*      hidden by default, prevent blinking and other weird rendering glitchs  */
}
.face {
  background-size: 100% 100%!important;
  background-position: center;
}
.face-wrapper .face {
  left: 100%;
  width: 100%;
  height: 100%
}
.side {
  left: 50%;
}
.cr, .cr .side {
  height: 100%;
}

/* putting it in place */
[class*="cuboid"] .ft, [class*="cuboid"] .bk {
  width: 100%;
  height: 100%;
}
[class*="cuboid"] .bk {
  left: 100%;
}
[class*="cuboid"] .rt {
  transform: rotateY(-90deg) translateX(-50%);
}
[class*="cuboid"] .lt {
  transform: rotateY(90deg) translateX(-50%);
}
[class*="cuboid"] .tp {
  transform: rotateX(90deg) translateY(-50%);
}
[class*="cuboid"] .bm {
  transform: rotateX(-90deg) translateY(-50%);
}
[class*="cuboid"] .lt {
  left: 100%;
}
[class*="cuboid"] .bm {
  top: 100%;
}
/* .cub-1 styles, setting how big */
.cub-1 {
  transform:translate3D(0em, 0em, 0em) rotateX(var(random(--rx))) rotateY(var(--ry)) rotateZ(var(--rz));
  opacity:1;
  width:var(--w);
  height:var(--h);
/*     margin:-6.25em 0 0 -10em; */
}
.cub-1 .ft {
  transform:translateZ(calc(0.5 * var(--d)));
}
.cub-1 .bk {
  transform:translateZ(calc(-0.5 * var(--d))) rotateY(180deg);
}
.cub-1 .rt, .cub-1 .lt {
  width:var(--d);
  height:100%;
}
.cub-1 .tp, .cub-1 .bm {
  width:100%;
  height:var(--d);
}
.cub-1 .face {
  background-color:rgb(219, 0, 0,0.75);
}




/* height 2 cub 2 styles: */
.cub-2 { /*ADDED extra rotateX for difference offset*/
  transform:translate3D(0em, 0em, 0em) rotateX(var(--rx)) rotateX(10deg) rotateY(var(--ry)) rotateZ(var(--rz));
  opacity:1;
  width:var(--w);
  height:var(--h*3);
   
/*     margin:-6.25em 0 0 -10em; */
}
.cub-2 .ft {
  transform:translateZ(calc(0.5 * var(--d)));
}
.cub-2 .bk {
  transform:translateZ(calc(-0.5 * var(--d))) rotateY(180deg);
}
.cub-2 .rt, .cub-2 .lt {
  width:var(--d);
  height:100%;
}
.cub-2 .tp, .cub-2 .bm {
  width:100%;
  height:var(--d);
}
.cub-2 .face {
  background-color:rgb(0, 100, 200,0.75);
}
/* diff widthcub 3 styles: */

.cub-3 { /*ADDED extra rotateY for difference offset*/
  transform:translate3D(0em, 0em, 0em) rotateX(var(--rx)) rotateY(var(--ry)) rotateY(-10deg) rotateZ(var(--rz) );
  opacity:1;
  width:23%;
  height:var(--h);
/*     margin:-6.25em 0 0 -10em; */
}
.cub-3 .ft {
  transform:translateZ(calc(0.5 * var(--d)));
}
.cub-3 .bk {
  transform:translateZ(calc(-0.5 * var(--d))) rotateY(180deg);
}
.cub-3 .rt, .cub-3 .lt {
  width:var(--d);
  height:100%;
}
.cub-3 .tp, .cub-3 .bm {
  width:100%;
  height:var(--d);
}
.cub-3 .face {
  background-color:rgb(0, 200, 10,0.75);
}